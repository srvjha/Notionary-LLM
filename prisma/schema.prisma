// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String          @id
  name          String
  email         String
  emailVerified Boolean         @default(false)
  image         String?
  role          Role            @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  ContextSource ContextSource[]
  ChatSession   ChatSession[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model ContextSource {
  id               String        @id @default(uuid())
  title            String
  sourceType       SourceType
  size             Float?
  charLength       Int?
  url              String?
  qdrantCollection String
  userId           String
  user             User          @relation(fields: [userId], references: [id])
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  chatSessions     ChatSession[] @relation("ContextToChat")
}

enum SourceType {
  PDF
  TEXT
  WEBSITE
  YOUTUBE
}

model ChatSession {
  id        String          @id @default(uuid())
  userId    String
  user      User            @relation(fields: [userId], references: [id])
  title     String?
  summary   String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  contexts  ContextSource[] @relation("ContextToChat")
  messages  Message[]
}

model Message {
  id            String      @id @default(uuid())
  chatSessionId String
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id])
  role          MessageRole
  content       String
  metadata      Json?
  createdAt     DateTime    @default(now())
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}
